// 1 Sum
Total Quantity Sold = SUM(Sales[Quantity])

// 2 Sumx
Total Sales = SUMX(Sales, Sales[Quantity]) = RELATED(Products[Current Price] ))

// 3 Average
Average Quantity Sold = MIN(Sales[Quantity])

// 4 Min
Min Quantity Sold = MIN(Sales[Quantity])

// 5 Max
Max Quantity Sold = MAX(Sales[Quantity])

// 6 Countrows
Total Transactions = COUNTROWS(Sales)

// 7 Calculate -> Sum -> Filter
Florida Quantity Sold = CALCULATE(SUM(Sales[Quantity]), FILTER(Locations, Locations[State Code] = "FL" ))

// 8 Calculate -> Sum -> Multiple Filters
Florida Quantity Sold of Product 2 or 3 = CALCULATE(SUM(Sales[Quantity]), 
FILTER(Locations, Locations[State Code] = "FL" ), 
FILTER(Products, Products[Product Name] = “Product 2” || Products[Product Name] = “Product 3” ))

// 9 Calculate -> Sum -> Multiple Filters (Including Variables)
// Florida filter
VAR InFlorida = FILTER(Locations, Locations[State Code] = “FL”)
// Product filter 2/3
VAR ProductFilter = FILTER(Products, Products[Product name] = “Product 2” || Products[Product Name] = “Product 3”)
RETURN
// This is calculating total quantity sold for Florida and Product 2 or 3
CALCULATE( [Total Quantity Sold],
InFlorida,
ProductFilter)

// 10 30 Day Running Total 
30 Day Running Total =
CALCULATE( [Total Sales],
FILTER(ALL(Dates),
Dates[Date] > MAX(Dates[Date}) – 30 &&
Dates[Date] <= MAX(Dates[Date] )))

// 11 Quantity Sold LY
Quantity Sold LY = CALCULATE( [Total Quantity Sold], SAMEPERIODLASTYEAR(Dates[Date] ))

// 12 Quantity Sold in Florida 
Quantity Sold in Florida = CALCULATE([Total Quantity Sold], Locations[State Code] = “FL”)

// 13 Quantity Sold in 2015 
Quantity Sold in 2015 = CALCULATE(Total Quantity Sold], Dates[Year] = “2015”)

// 14 Quantity Sold for Product 1  
Quantity Sold for Product 1  = CALCULATE([Total Quantity Sold], FILTER(Products, Products[Products Name] = “Product 1” ))

// 15 Table Function – Filter
Table Filter = FILTER(Sales, Sales[Quantity] >= 2)

// 16 Table Function – Values
Table Value = VALUES(Sales[Product ID] )

// 17 Table Function – ALL
Table ALL = ALL(Sales[Product ID] )

// 18 Average Quantity Sold per day
Average Quantity Sold per day = AVERAGEX(VALUES(Dates[Date]), [Total Quantity Sold] )

//19 All Quantity Sold 
All Quantity Sold = CALCULATE( [Total Quantity Sold], ALL( Products)
//20 Quantity Sold LY
Quantity Sold LY = CALCULATE( Total Quantity Sold], DATEADD(Dates[Date], -1, YEAR ))
//21 Quantity Sold LM
Quantity Sold LM = CALCULATE( Total Quantity Sold], DATEADD(Dates[Date], -1, MONTH ))
//22 Quantity Sold 2Q AGO
Quantity Sold 2Q AGO = CALCULATE( Total Quantity Sold], DATEADD(Dates[Date], -1, QUARTER))
//23 Quantity Sold MTD
Quantity Sold MTD = CALCULATE( Total Quantity Sold], DATESMTD(Dates[Date] ))
//24 Quantity Sold QTD
Quantity Sold QTD = CALCULATE( Total Quantity Sold], DATEQTD(Dates[Date] ))
//25 Quantity Sold YTD
Quantity Sold YTD = CALCULATE( Total Quantity Sold], DATEYTD(Dates[Date] ))
//26 Quantity Sold LYTD
Quantity Sold LYTD = CALCULATE( [Quantity Sold LY], DATESYTD(Dates[Date] ))

//27 Quantity Sold YTD
Quantity Sold YTD = CALCULATE( [Total Quantity Sold], DATESYTD(Dates[Date] ))

//28 Total Costs 
Total Costs = SUMX(Sales, Sales[Quantity] * RELATED) Products[Cost] ))

//29 Total Profits
Total Profits = [Total Sales] – [Total Costs]

//30 Cumulative Profits
Cumulative Profits = CALCULATE( [Total Profits],
FILTER(ALLSELECTED(Dates ),
Dates[Date] <= MAX(Dates[Date} )))

//31 Profits LM
Profits LM = CALCULATE( [Total Profits], DATEADD(Dates[Date], -1, MONTH ))

//32 Profits 2M Ago 
Profits 2M Ago = CALCULATE( [Total Profits], DATEADD(Dates[Date], -2, MONTH ))

//33 Cumulative Profits LM
Cumulative Profits LM =
CALCULATE( [Profits LM], 
FILTER(ALLSELECTED(Dates),
Dates[Date] <= MAX(Dates[Date] )))

//34 Cumulative Profits 2M Ago
Cumulative Profits 2M Ago =
CALCULATE( [Profits 2M Ago], 
FILTER(ALLSELECTED(Dates),
Dates[Date] <= MAX(Dates[Date] )))

//35 RANKX – Customer Group Profits
Customer Group Profits =
CALCULATE( [Total Profits],
FILTER(VALUES ( Customers[Customer Name] ),
COUNTROWS(
FILTER(‘Customer Groups’,
RANKX( ALL( Customers[Customer Name] ), [Total Profits],, DESC ) > ‘Çustomer Groups’ [Min]
&& RANKX( ALL( Customers[Customer Name] ), [Total Profits],, DESC ) <= ‘Customer Groups’ [Max] ))
> 0 ))

// 36 Average Margins -> DIVIDE
Average Margins = DIVIDE( [Total Profits], [Total Sales],0 )

// 37 Margin Group Profits 
Margin Group Profits =
CALCULATE( [Total Profits],
FILTER(VALUES(Products[Average Margins] ),
COUNTROWS(
FILTER( ‘Product Margin Group’,
Products[Average Margins] >= ‘Product Margin Group’ [Min]
&& Products[Average Margins] < ‘Product Margin Group’[Max] ))

// 38 Total Costs
Total Costs = SUMX(Sales, Sales[Order Quantity] = Sales[Total Unit Cost]

// 39 Total Profits
Total Profits = [Total Sales] – [Total Costs]

// 40 Customer Rank
Customer Rank = RANKX( ALL(Customer), [Total Profits], ,DESC )

// 41 Top 10 Customer Profits
Top 10 Customer Profits = IF( [Customer Rank] <= 10, [Total Profits], BLANK()

// 42 Top 10 Customer Profits
Top 10 Customer Profits = IF( ISFILTERED( Customer[Customer Names]  ),
IF( [Customer Rank] <= 10, [Total Profits], BLANK() ),
CALCULATE( [Total Profits], TOPN( 10, VALUES( Customer[Customer Names] ), [Total Profits] )))

// 43 Forecasting
// Total Sales
Total Sales = SUM(Sales[Total Revenue] )
// Sales LY 
Sales LY = CALCULATE( [Total Sales], SAMEPERIODLASTYEAR(Dates[Date] ))
//2016 Forecast
2016 Forecast = CALCULATE( [Total Sales],
FILTER( Dates, Dates[Year] = “2016” ))

//Cumulative Sales
Cumulative Sales = CALCULATE( [Total Sales],
FILTER( ALLSELECTED(Dates ),
Dates[Date] <= MAX(Dates[Date] ))

//Cumulative 2016 Forecast
Cumulative 2016 Forecast =
CALCULATE( 2016 Forecast],
FILTER(ALLSELECTED(Dates),
Dates[Date] <= MAX(Dates[Date] )))
// Cumulative Sales
Cumulative Sales =
IF( ISBLANK([Total Sales]),
BLANK(),
CALCULATE([Total Sales],
FILTER(ALLSELECTED(Dates),
Dates[Date] <= MAX(Dates[Date] ))))
// Forecast vs Sales
Forecast vs Sales =
IF( ISBLANK( [Total Sales] ),
BLANK(),
[Cumulative 2016 Forecast] – [Cumulative Sales]

// 44 Cumulatively Comparing historical monthly data
//Total Sales
Total Sales = SUM(Sales[Total Revenue] )

//Total Sales LM
Total Sales LM = CALCULATE( [Total Sales], DATEADD(Dates[Date], -1, MONTH )

//Total Sales 2M Ago
Total Sales 2M Ago = CALCULATE( [Total Sales], DATEADD(Dates[Date], -2, MONTH )

// Cumulative Sales
Cumulative Sales = 
CALCULATE( [Total Sales],
FILTER(ALLSELECTED(Dates ),
Dates[Date] <= MAX( Dates[Date] )))

// Cumulative Sales LM
Cumulative Sales LM =
CALCULATE( [Total Sales LM],
FILTER(ALLSELECTED(Dates ),
Dates[Date] <= MAX( Dates[Date] )))

// Cumulative Sales 2M AGO
Cumulative Sales 2M AGO =
CALCULATE( [Total Sales 2M AGO],
FILTER(ALLSELECTED(Dates ),
Dates[Date] <= MAX( Dates[Date] )))


// 45 Forecasting 30D MA
// Total Sales 
Total Sales = SUM( Sales[Total Revenue] )

//Total Costs
Total Costs = 
SUMX( Sales,
Sales[Total Unit Cost] = Sales[Order Quantity] )

// Total Profits
Total Profits =
[Total Sales] – [Total Costs]
// Total Profit Forecast
Total Profit Forecast = 
IF( ISBLANK( [Total Profits] ),
CALCULATE( [Total Profits], SAMEPERIODLASTYEAR( Dates[Date] )),
BLANK()

// Profits 30D MA 
Profits 30D MA =
IF( ISBLANK( [Total Profits] ),
BLANK(),
AVERAGEX(
DATESINPERIOD(
Dates[Date],
LASTDATE( Dates[Date] ),
-30,DAY),
[Total Profits]  ))

Total Forecast
Total Forecast =
IF( ISBLANK( [Total Profits] ),
CALCULATE( [Profits 30D MA], SAMEPERIODLASTYEAR( Dates[Date] )),
BLANK() )

// 46 Profit Average per Manager
Profit average per Manager = 
AVERAGEX(
KEEPFILTERS(VALUES('Managers'[Manager])),
CALCULATE(SUM('Sales'[Profit]))
)
// 47 Profit variance per Manager
Profit variance per Manager = 
VARX.P(
KEEPFILTERS(VALUES('Managers'[Manager])),
CALCULATE(SUM('Sales'[Profit]))
)

// 48 Profit max per Manager
Profit max per Manager = 
MAXX(
KEEPFILTERS(VALUES('Managers'[Manager])),
CALCULATE(SUM('Sales'[Profit]))
)
// 49 Profit min per Manager
Profit min per Manager = 
MINX(
KEEPFILTERS(VALUES('Managers'[Manager])),
CALCULATE(SUM('Sales'[Profit]))
)

// 50 Weighted average Revenue
Revenue weighted by Score per Category = 
VAR __CATEGORY_VALUES = VALUES('Product'[Category])
RETURN
DIVIDE(
SUMX(
KEEPFILTERS(__CATEGORY_VALUES),
CALCULATE(SUM('Salesfact'[Revenue]) * SUM('Sentiment'[Score]))
),
SUMX(
KEEPFILTERS(__CATEGORY_VALUES),
CALCULATE(SUM('Sentiment'[Score]))
)
)

// 51 Profit -> Filter
Profit for Michael Carney = 
CALCULATE
SUM('Sales'[Profit]),
'Managers'[Manager] IN { "Michael Carney" }
)

//52 Average of Profit difference from -> Filtered value
Average of Profit difference from Michael Carney = 
VAR __BASELINE_VALUE =
CALCULATE(
AVERAGE('Sales'[Profit]),
'Managers'[Manager] IN { "Michael Carney" }
)
VAR __MEASURE_VALUE = AVERAGE('Sales'[Profit])
RETURN
IF(NOT ISBLANK(__MEASURE_VALUE), __MEASURE_VALUE - __BASELINE_VALUE)


//53 Average of Profit % difference from -> Filtered value
Average of Profit % difference from Michael Carney = 
VAR __BASELINE_VALUE =
CALCULATE(
AVERAGE('Sales'[Profit]),
'Managers'[Manager] IN { "Michael Carney" }
)
VAR __MEASURE_VALUE = AVERAGE('Sales'[Profit])
RETURN
IF(
NOT ISBLANK(__MEASURE_VALUE),
DIVIDE(__MEASURE_VALUE - __BASELINE_VALUE, __BASELINE_VALUE)


//54 Running total
Profit running total in Manager = 
CALCULATE(
SUM('Sales'[Profit]),
FILTER(
ALLSELECTED('Managers'[Manager]),
ISONORAFTER('Managers'[Manager], MAX('Managers'[Manager]), DESC)
)
)

//55 Total profit -> Filter applied 
Profit total for Manager = 
CALCULATE(SUM('Sales'[Profit]), ALLSELECTED('Managers'[Manager]))

//56 Total profit -> Filter not applied
Profit total for Manager = 
CALCULATE(SUM('Sales'[Profit]), ALL('Managers'[Manager]))

//57 Percentage difference
Cost 2 % difference from Cost 1 = 
VAR __BASELINE_VALUE = SUM('Sales'[Cost 1])
VAR __VALUE_TO_COMPARE = SUM('Sales'[Cost 2])
RETURN
IF(
NOT ISBLANK(__VALUE_TO_COMPARE),
DIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)
)

//58 Correlation Coefficient
Sale Price and Cost 1 correlation for Manager = 
VAR __CORRELATION_TABLE = VALUES('Managers'[Manager])
VAR __COUNT =
COUNTX(
KEEPFILTERS(__CORRELATION_TABLE),
CALCULATE(SUM('Sales'[Sale Price]) * SUM('Sales'[Cost 1]))
)
VAR __SUM_X =
SUMX(
KEEPFILTERS(__CORRELATION_TABLE),
CALCULATE(SUM('Sales'[Sale Price]))
)
VAR __SUM_Y =
SUMX(
KEEPFILTERS(__CORRELATION_TABLE),
CALCULATE(SUM('Sales'[Cost 1]))
)
VAR __SUM_XY =
SUMX(
KEEPFILTERS(__CORRELATION_TABLE),
CALCULATE(SUM('Sales'[Sale Price]) * SUM('Sales'[Cost 1]) * 1.)
)
VAR __SUM_X2 =
SUMX(
KEEPFILTERS(__CORRELATION_TABLE),
CALCULATE(SUM('Sales'[Sale Price]) ^ 2)
)
VAR __SUM_Y2 =
SUMX(
KEEPFILTERS(__CORRELATION_TABLE),
CALCULATE(SUM('Sales'[Cost 1]) ^ 2)
)
RETURN
DIVIDE(
__COUNT * __SUM_XY - __SUM_X * __SUM_Y * 1.,
SQRT(
(__COUNT * __SUM_X2 - __SUM_X ^ 2)
* (__COUNT * __SUM_Y2 - __SUM_Y ^ 2)
)
)

//59 Star Rating
Average of Profit star rating = 
VAR __MAX_NUMBER_OF_STARS = 5
VAR __MIN_RATED_VALUE = 1
VAR __MAX_RATED_VALUE = 10
VAR __BASE_VALUE = AVERAGE('Sales'[Profit])
VAR __NORMALIZED_BASE_VALUE =
MIN(
MAX(
DIVIDE(
__BASE_VALUE - __MIN_RATED_VALUE,
__MAX_RATED_VALUE - __MIN_RATED_VALUE
),
0
),
1
)
VAR __STAR_RATING = ROUND(__NORMALIZED_BASE_VALUE * __MAX_NUMBER_OF_STARS, 0)
RETURN
IF(
NOT ISBLANK(__BASE_VALUE),
REPT(UNICHAR(9733), __STAR_RATING)
& REPT(UNICHAR(9734), __MAX_NUMBER_OF_STARS - __STAR_RATING)
)

//60 Concatenated manager values 
List of Manager values = 
VAR __DISTINCT_VALUES_COUNT = DISTINCTCOUNT('Managers'[Manager])
VAR __MAX_VALUES_TO_SHOW = 3
RETURN
IF(
__DISTINCT_VALUES_COUNT > __MAX_VALUES_TO_SHOW,
CONCATENATE(
CONCATENATEX(
TOPN(
__MAX_VALUES_TO_SHOW,
VALUES('Managers'[Manager]),
'Managers'[Manager],
ASC
),
'Managers'[Manager],
", ",
'Managers'[Manager],
ASC
),
", etc."
),
CONCATENATEX(
VALUES('Managers'[Manager]),
'Managers'[Manager],
", ",
'Managers'[Manager],
ASC
)
)